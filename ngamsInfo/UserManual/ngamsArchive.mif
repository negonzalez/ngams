<MIFFile 5.0> # This is a FRAMEMAKER 5.0 MIF File
# -----------------------------------------------
# This file has been automatically produced. DO NOT EDIT THIS FILE!!!!!!
# Input file:  ngamsCClientLib.c
# Formatter :  @(#) $Id: ngamsArchive.mif,v 1.1.1.1 2009/12/28 13:17:44 jknudstr Exp $
# -----------------------------------------------
 <Para 
  <PgfTag `ManSection'>
  <ParaLine 
   <String `NAME'>
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManBody'>
  <ParaLine 
   <String `ngamsArchive(), ngamsArchiveFromMem(), ngamsClone(), ngamsCmd2No(),'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCmd2Str(), ngamsDumpErrStdout(), ngamsEncodeUrlVal(), ngamsExit(),'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsFreeStatus(), ngamsInitStatus(), ngamsIsDir(), ngamsLabel(),'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsLicense(), ngamsOffline(), ngamsOnline(), ngamsRegister(),'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsRemDisk(), ngamsRemFile(), ngamsRetrieve2File(), ngamsStat2Str(),'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsStatus(), ngamsSubscribe(), ngamsToUpper(), ngamsUnsubscribe(),'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsVersion() - C functions to interface to NG/AMS'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManSection'>
  <ParaLine 
   <String `SYNOPSIS'>
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManBody'>
  <ParaLine 
   <String `#include "ngams.h"'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `In general for the NG/AMS interface functions listed below,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `the "host" parameter is the name of the host where the NG/AMS Server'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `is running. E.g.: "arcus2.hq.eso.org". The "port" parameter is the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `socket port, which the NG/AMS Server is waiting on.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `If the parameter "wait" is set to 0, an immediate reply to the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `request will be generated, i.e. before the request has been handled.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `The parameter "status" is a structure containing the following members:'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Data Type       Member     Description'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSMALL_BUF  date       Date for handling query.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT       errorCode  Error code giving status for the query.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           See #1.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSMALL_BUF  hostId     Host ID for host where the NG/AMS Server'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           is running.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsHUGE_BUF   message    Message from the NG/AMS Server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSMALL_BUF  status     Status of query ("OK" | "FAILURE").'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSMALL_BUF  state      State of the NG/AMS Server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSMALL_BUF  subState   Sub-State of the NG/AMS Server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSMALL_BUF  version    Version of the NG/AMS Server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `char            replyData  Pointer array of pointers pointing to'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           allocated buffers contaiing the reply data'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           from the request.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `#1: The following error codes (internal to the NG/AMS C API)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    are defined (data type: ngamsSTAT):'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Error Macro             Description'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT_SUCCESS       Query successfully executed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_HOST           No such host.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_SOCK           Cannot create socket.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_CON            Cannot connect to host/server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_COM            Problem occurred during socket connection.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_TIMEOUT        Timeout encountered while communication with'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_WR_HD          Write error on socket while writing header.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_WR_DATA        Write error on socket while writing data.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_RD_DATA        Read error while reading data.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_INV_REPLY      Invalid answer from data server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_FILE           Invalid filename specified.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_ALLOC_MEM      Cannot allocate memory.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_UNKNOWN_STAT   Unknown status code.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_UNKNOWN_CMD    Unknown command issued.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_INV_TARG_FILE  Invalid target filename specified.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsERR_INV_PARS       Invalid parameters given.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSRV_OK             Request successfully handled by server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSRV_REDIRECT       The reply is an HTTP redirection response.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSRV_INV_QUERY      Invalid query.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Apart from that, the errors defined by NG/AMS can be returned.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `All functions return ngamsSTAT_SUCCESS in case of success. In case of'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `an error a termination status within the set of status codes'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `given above.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `The following macros are defined for referring to NG/AMS commands:'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Command Macros (#2)       Description'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_ARCHIVE          Archive file.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_CLONE            Clone files.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_EXIT             Make NG/AMS Server exit.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_LABEL            Make NG/AMS print out a disk label.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_ONLINE           Bring NG/AMS Server Online.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_OFFLINE          Bring NG/AMS Server Offline.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_REGISTER         Register files on a disk.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_REMDISK          Remove a disk from the NGAS system.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_REMFILE          Remove a file from the NGAS system.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_RETRIEVE         Retrieve a file.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_STATUS           Query status information from NG/AMS.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_SUBSCRIBE        Subscribe to a NG/AMS Server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsCMD_UNSUBSCRIBE      Un-subscribe/cancel a previous subscription.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `#2: All command macros exist also as a string, which carries the name'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    of the enumarated macro name with a "_STR" appended.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `In the following, the functions provided for interacting with NG/AMS'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `are listed. The specific parameters for each function are listed in'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `connection with the function. The parameters used by several'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `functions are as follows:'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `host:         Host name of NG/AMS Server to contact.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `port:         Port number used by NG/AMS Server to contact.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `timeoutSecs:  Timeout in seconds to apply while executing the request.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `wait:         Wait for the NG/AMS Server to finish the request (=1)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              completely, or return an immdiate response (=0).'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `status:       Pointer to ngamsSTATUS structure containing the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              status of the query.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `The functions provided by the NG/AMS C-API:'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsArchive(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const char          *fileUri,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const char          *mimeType,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int           noVersioning,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int           wait,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Archive a file in the NGAS system.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileUri:      Reference name for the file to archive.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `mimeType:     The mime-type of the file to archive. In some cases'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              it is not possible for NG/AMS to determine the mime-type'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              of a data file to be archived, e.g. when the file being is'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              archived is RETRIEVEd from another NGAS host. For efficiency'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              it is thus better to indicate the mime-type to enable'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              NG/AMS to store the file directly on the target disk.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              If not use this can be put to "".'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `noVersioning: If set to 1 no new File Version will be generated for'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              the file being archived even though a file with that'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `              File ID was already existing.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsArchiveFromMem(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const char          *fileUri,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const char          *bufPtr,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const int           size,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const char          *mimeType,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const int           noVersioning,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              const int           wait,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                              ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Archive a file which contents have been loaded into a buffer in memory.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileUri,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `mimeType,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `noVersioning: See ngamsArchive().'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `bufPtr:       Pointer to buffer containing the contents of the file.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `size:         Size in bytes of the data loaded into memory.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsClone(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const char          *fileId,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const int           fileVersion,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const char          *diskId,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const int           wait,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Execute a CLONE command. For the exact interpretation of various'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `combinations of fileId, fileVersion and diskId, consult the man-page'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `for the NG/AMS Python module "ngamsCloneCmd", function: "clone()".'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileId:          ID of file to clone.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileVersion:     Version of files to be taken into account for the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                 cloning.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `diskId:          Disk ID for the files to be taken into account.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsCmd2No(const ngamsSMALL_BUF    cmdStr,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      ngamsCMD                *cmdCode)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Convert a command given as string into the corresponding code (integer).'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `cmdStr:    Command name as string.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `cmdCode:   Command code as defined by the enumerated type ngamsCMD.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsCmd2Str(const ngamsCMD    cmdCode,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       ngamsSMALL_BUF    cmdStr)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Convert an NG/AMS command given as a code (integer) to a string.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `cmdCode,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `cmdStr:    See ngamsCmd2No().'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `void ngamsDumpErrStdout(const ngamsSTATUS  *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Dump an error message in the status structure on stdout.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `status:   Pointing to instance of the ngamsSTATUS structure containing'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `          the information to print out.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `char *ngamsEncodeUrlVal(const char *urlVal,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        const int  skipScheme)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Encode the value given as input parameter to replace special'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `characters to make the value suitable for usage in a URL.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `urlVal:            Value to be encoded.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `skipScheme:        If the value is initiated with an HTTP scheme'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                   (ftp:, http:, file:), this will not be encoded'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                   if this flag is set to 1.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `void ngamsFreeStatus(ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Free the memory occupied by the status object.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `status:   Pointing to instance of the ngamsSTATUS structure containing'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `          the information to print out.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `void ngamsInitStatus(ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Initialize the ngamsSTATUS structure, making it ready for usage within'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `the NG/AMS C-API functions.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `status:   Pointing to instance of the ngamsSTATUS structure containing'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `          the information to print out.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `int ngamsIsDir(const char  *fileName)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Return 1 if the filename given is a directory, otherwise 0 is returned.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileName:    Name of directory to probe.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsExit(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                    const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                    const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                    const int           wait,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                    ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send an EXIT command to the NG/AMS Server to make it'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `clean up and terminate execution.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsLabel(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     const char          *slotId,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send a LABEL command to the NG/AMS Server.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `slotId:    ID of slot hosting the disk for which to generate the label.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `char *ngamsLicense(void)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Return pointer to buffer containing the NG/AMS License Agreement.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsOffline(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int           force,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int           wait,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send an OFFLINE command to the NG/AMS Server to bring it to Offline State.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `force:     Force the server to go Offline immediately, even though it is'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `           busy.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsOnline(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      const int           wait,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send an ONLINE command to the NG/AMS Server to bring it to Online State.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsRegister(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        const char          *path,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        const int           wait,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send an REGISTER command to the NG/AMS Server to make it register'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `a file or set of files.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `path:      Path starting point from which the scanning for files to'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `           register will be initiated. Only files with a known mime-type'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `           is taken into account.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsRemDisk(const char        *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int         port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const float       timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const char        *diskId,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int         execute,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       ngamsSTATUS       *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send a REMDISK command to the NG/AMS Server. If execute is 0 the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `disk information will not be deleted from the NGAS DB and from the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `the disk itself. Otherwise, if 1 is specified, this information will'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `will be deleted.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `diskId:      ID of disk to remove.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `execute:     If set to 1 the command will be executed and the disk'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `             removed from the system (if possible). Otherwise a report'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `             will be send back indicating if it is possible to'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `             remove the disk referenced.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsRemFile(const char        *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int         port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const float       timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const char        *diskId,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const char        *fileId,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int         fileVersion,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       const int         execute,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       ngamsSTATUS       *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send a REMFILE command to the NG/AMS Server. If execute is 0 the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `disk information will not be deleted from the NGAS DB and from the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `the disk itself. Otherwise, if 1 is specified, this information will'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `will be deleted. For the interpretation of various combinations of'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `the parameters diskId, fileId, fileVersion and execute consult the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `man-page of the Python module "ngamsRemoveCmd", function remFile().'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `diskId:        ID of disk hosting the file(s) to be removed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileId:        ID of file(s) to be removed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileVersion:   Version of file(s) to be removed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `execute:       If set to 1 the files will be removed (if possible),'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `               otherwise a report will be send back indicating what'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `               would be removed if the command is executed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsRetrieve2File(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             const char          *fileId,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             const int           fileVersion,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             const char          *processing,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             const char          *processingPars,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             const char          *targetFile,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                             ngamsSTATUS         *status);'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send a RETRIEVE command to the NG/AMS Server to retrieve a'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `data file, and store this in a file on the local disk.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileId:           ID of the file to retrieve.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `fileVersion:      Specific version of file to retrieve. If set to -1 the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  latest version will be retrieved.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `processing:       Name of DPPI to be invoked by NG/AMS when data is'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  retrieved.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `processingPars:   Optional list of parameters to hand over to the DPPI.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `targetFile:       If a valid filename is specified the data retrieved'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  will be stored in a file with that name. If a directory'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  is given, the data file retrieved will be stored in that'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  directory with the name under which it is stored in'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  NGAS. If this parameter is an empty string, it will be'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  tried to stored the file retrieved under the NGAS'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                  archive name in the current working directory.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsStat2Str(const ngamsSTAT  statNo,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                        ngamsMED_BUF     statStr)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Convert a status code (ngamsSTAT) to a readable string.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `statNo:    Status as code.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `statStr:   Status as string.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsStatus(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                      ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send a STATUS command to NG/AMS to query the current status of the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `system. No parameters are defined at present.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsSubscribe(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         const char          *url,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         const int           priority,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         const char          *startDate,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         const char          *filterPlugIn,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         const char          *filterPlugInPars,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                         ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send a SUBSCRIBE to NG/AMS to subscribe for data or a specific type'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `of data.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `url:                 Subscriber URL to where data is pushed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `priority:            Priority of the Subscriber (low number = high'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     priority). Default value 10.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `startDate:           Start date defining which data the subscription'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     should take into account.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `filterPlugIn:        Optional Filter Plug-In to apply when selecting'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     which data files to deliver to the clients.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `filterPlugInPars:    Optional Filter Plug-In Parameters to transfer'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                     to the Filter Plug-In.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `void ngamsToUpper(char *str)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Convert a string to upper characters.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `str:   Pointer to string to convert.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `char *ngamsVersion(void)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Return pointer to buffer with the NG/AMS version information.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTAT ngamsUnsubscribe(const char          *host,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           const int           port,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           const float         timeoutSecs,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           const char          *url,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                           ngamsSTATUS         *status)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Send an UNSUBSCRIBE to NG/AMS to subscribe for data or a specific type'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `of data.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `url:                 Subscriber URL to where data is pushed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManSection'>
  <ParaLine 
   <String `CAUTIONS'>
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManBody'>
  <ParaLine 
   <String `This is a first implementation of the module. Changes may be'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `introduced in order to improve the usability of the API.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Remember to perform a call to ngamsInitStatus() right after declaring'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `this, and a call to ngamsFreeStatus() after each call to one of the'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `commands used to issue commands to NG/AMS. Memory may be allocated'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `dynamically and needs to be freed.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManSection'>
  <ParaLine 
   <String `EXAMPLES'>
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManBody'>
  <ParaLine 
   <String `To archive a file using the API the following must be called from'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `the application:'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `#include "ngams.h"'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTATUS      status;'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `if (ngamsArchive("wfinau", "7171", 10, "/home/data/MyFile.fits", "",'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                 1, 0, &status) != ngamsSTAT_SUCCESS)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    {'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    ngamsDumpErrStdout(&status);'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    ... error handling ...'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    }'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `To retrieve a file into the directory "/home/data/target_dir". The'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `name will be the same as the File ID:'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `#include "ngams.h"'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `ngamsSTATUS      status;'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `if (ngamsRetrieve2File("wfinau", "7171", 30,'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       "WFI.2001-10-21T23:24:03.925",'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       -1, "", "", "/home/data/target_dir",'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `                       &status) != ngamsSTAT_SUCCESS)'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    {'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    ngamsDumpErrStdout(&status);'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    ... error handling ...'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `    }'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManSection'>
  <ParaLine 
   <String `CAUTIONS'>
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `ManBody'>
  <ParaLine 
   <String `If data is returned by the NG/AMS Server the member "replyData" will'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `have a pointer pointing to each block of data. It is the responsibility'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `of the calling application to free these data chunks. The function'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `"ngamsFreeStatus()" can be used for this.'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
 > # end of Para
 <Para 
  <PgfTag `Listing'>
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `- - - - - -'>
   <Char HardReturn >
  > # end of ParaLine
  <ParaLine 
   <String `Last change:  24/12/02-12:24'>
  > #end of ParaLine
 > # end of Para
# _____oOo_____
